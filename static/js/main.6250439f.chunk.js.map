{"version":3,"sources":["components/ReadOnlyRow.jsx","components/EditableRow.jsx","App.jsx","index.jsx"],"names":["ReadOnlyRow","contact","handleEditClick","handleDeleteClick","fullName","address","phoneNumber","email","type","onClick","event","id","EditableRow","editFormData","handleEditFormChange","handleCancelClick","required","placeholder","name","value","onChange","App","useState","data","contacts","setContacts","addFormData","setAddFormData","setEditFormData","editContactId","setEditContactId","searchTerm","setSearchTerm","searchResult","setSearchResults","handleAddFormChange","preventDefault","fieldName","target","getAttribute","fieldValue","newFormData","formValues","contactId","newContacts","index","findIndex","splice","order","setOrder","className","e","newContactList","filter","Object","values","join","toLowerCase","includes","console","log","searchHandler","onSubmit","editedContact","col","sorted","sort","a","b","toLocaleLowerCase","sortedData","length","map","newContact","nanoid","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6250439f.chunk.js","sourcesContent":["import React from \"react\";\n\nconst ReadOnlyRow = ({ contact, handleEditClick, handleDeleteClick}) => {\n  \n  \n  return (\n    \n    <tr>\n      <td>{contact.fullName}</td>\n      <td>{contact.address}</td>\n      <td>{contact.phoneNumber}</td>\n      <td>{contact.email}</td>\n      <td>\n        <button\n          type=\"button\"\n          onClick={(event) => handleEditClick(event, contact)}\n        >\n          Edit\n        </button>\n        <button type=\"button\" onClick={() => handleDeleteClick(contact.id)}>\n          Delete\n        </button>\n      </td>\n      </tr>\n  );\n};\n\nexport default ReadOnlyRow;\n","import React from \"react\";\n\nconst EditableRow = ({\n  editFormData,\n  handleEditFormChange,\n  handleCancelClick,\n}) => {\n  return (\n    <tr>\n      <td>\n        <input\n          type=\"text\"\n          required=\"required\"\n          placeholder=\"Enter a name...\"\n          name=\"fullName\"\n          value={editFormData.fullName}\n          onChange={handleEditFormChange}\n        ></input>\n      </td>\n      <td>\n        <input\n          type=\"text\"\n          required=\"required\"\n          placeholder=\"Enter an address...\"\n          name=\"address\"\n          value={editFormData.address}\n          onChange={handleEditFormChange}\n        ></input>\n      </td>\n      <td>\n        <input\n          type=\"text\"\n          required=\"required\"\n          placeholder=\"Enter a phone number...\"\n          name=\"phoneNumber\"\n          value={editFormData.phoneNumber}\n          onChange={handleEditFormChange}\n        ></input>\n      </td>\n      <td>\n        <input\n          type=\"email\"\n          required=\"required\"\n          placeholder=\"Enter an email...\"\n          name=\"email\"\n          value={editFormData.email}\n          onChange={handleEditFormChange}\n        ></input>\n      </td>\n      <td>\n        <button type=\"submit\">Save</button>\n        <button type=\"button\" onClick={handleCancelClick}>\n          Cancel\n        </button>\n      </td>\n    </tr>\n  );\n};\n\nexport default EditableRow;\n","import React, { useState, Fragment } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport \"./App.css\";\nimport data from \"./mock-data.json\";\nimport ReadOnlyRow from \"./components/ReadOnlyRow\";\nimport EditableRow from \"./components/EditableRow\";\n\nconst App = () => {\n  \n  const [contacts, setContacts] = useState(data);\n  const [addFormData, setAddFormData] = useState({\n    fullName: \"\",\n    address: \"\",\n    phoneNumber: \"\",\n    email: \"\",\n  });\n\n  const [editFormData, setEditFormData] = useState({\n    fullName: \"\",\n    address: \"\",\n    phoneNumber: \"\",\n    email: \"\",\n  });\n\n  const [editContactId, setEditContactId] = useState(null);\n\n  const [searchTerm,setSearchTerm] = useState(\"\")\n  const [searchResult , setSearchResults] =useState([])\n\n\n  const handleAddFormChange = (event) => {\n    event.preventDefault();\n\n    const fieldName = event.target.getAttribute(\"name\");\n    const fieldValue = event.target.value;\n\n    const newFormData = { ...addFormData };\n    newFormData[fieldName] = fieldValue;\n    \n\n    setAddFormData(newFormData);\n    \n  };\n\n  const handleEditFormChange = (event) => {\n    event.preventDefault();\n\n    const fieldName = event.target.getAttribute(\"name\");\n    const fieldValue = event.target.value;\n\n    const newFormData = { ...editFormData };\n    newFormData[fieldName] = fieldValue;\n\n    setEditFormData(newFormData);\n  };\n\n  const handleAddFormSubmit = (event) => {\n    event.preventDefault();\n\n    const newContact = {\n      id: nanoid(),\n      fullName: addFormData.fullName,\n      address: addFormData.address,\n      phoneNumber: addFormData.phoneNumber,\n      email: addFormData.email,\n    };\n\n    const newContacts = [...contacts, newContact];\n    setContacts(newContacts);\n  };\n\n  const handleEditFormSubmit = (event) => {\n    event.preventDefault();\n\n    const editedContact = {\n      id: editContactId,\n      fullName: editFormData.fullName,\n      address: editFormData.address,\n      phoneNumber: editFormData.phoneNumber,\n      email: editFormData.email,\n    };\n\n    const newContacts = [...contacts];\n\n    const index = contacts.findIndex((contact) => contact.id === editContactId);\n\n    newContacts[index] = editedContact;\n\n    setContacts(newContacts);\n    setEditContactId(null);\n  };\n\n  const handleEditClick = (event, contact) => {\n    event.preventDefault();\n    setEditContactId(contact.id);\n\n    const formValues = {\n      fullName: contact.fullName,\n      address: contact.address,\n      phoneNumber: contact.phoneNumber,\n      email: contact.email,\n    };\n\n    setEditFormData(formValues);\n    \n  };\n\n  const handleCancelClick = () => {\n    setEditContactId(null);\n  };\n\n  const handleDeleteClick = (contactId) => {\n    const newContacts = [...contacts];\n\n    const index = contacts.findIndex((contact) => contact.id === contactId);\n\n    newContacts.splice(index, 1);\n\n    setContacts(newContacts);\n  };\n  \n  const searchHandler=(e)=>{\n    e.preventDefault();\n    setSearchTerm(e.target.value);\n    if(searchTerm !== \"\"){\n      const newContactList = contacts.filter((contact)=>{\n        return Object.values(contact)\n        .join(\" \")\n        .toLowerCase() \n        .includes(searchTerm.toLowerCase())     \n      })\n      console.log(newContactList)\n      setSearchResults(newContactList)\n      console.log(searchResult)\n    }else{\n      setSearchResults(contacts)\n    }\n    \n  }\n  // const [order,setOrder] = useState(\"ASC\")\n  // const sortedData=(col)=>{\n  //   if(order === \"ASC\"){\n  //    const sorted = contacts.sort((a,b)=>{\n  //      a[col].toLowerCase() > b[col].toLowerCase() ? 1:-1\n  //    })\n  //     setContacts(sortedData)\n  //     setOrder(\"DSC\")\n  //   }\n  // }\n  const [order,setOrder] =useState(\"ASC\")\n  const sortedData = (col)=>{\n    if(order ===\"ASC\"){\n      const sorted =[...contacts].sort((a,b)=>{\n        return a.fullName.toLocaleLowerCase() > b.fullName.toLocaleLowerCase() ? 1:-1\n      });\n      \n      setContacts(sorted);\n      setSearchResults(sorted);\n      setOrder(\"DSC\")\n    }\n\n    if(order === \"DSC\"){\n      const sorted=[...contacts].sort((a,b)=>{\n        return a.fullName.toLowerCase() < b.fullName.toLocaleLowerCase() ? 1: -1\n      })\n      setContacts(sorted);\n      setSearchResults(sorted);\n      setOrder(\"ASC\")    \n    }\n   \n  }\n  return (\n    <div className=\"app-container\">\n      <h1>User List</h1>\n      <div className=\"search-icon\">\n        <input type=\"text\" \n        placeholder=\"Search Contact\"\n        \n        onChange={(e)=>searchHandler(e)} />\n        {/* search icon */}\n      </div>\n      <form onSubmit={handleEditFormSubmit}>\n        <table>\n          <thead>\n            <tr >\n              <th onClick={()=>{sortedData(\"fullname\")}}>Name</th>\n            \n              <th>Address</th>\n              <th>Phone Number</th>\n              <th>Email</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {searchTerm.length < 1 ? contacts.map((contact) => (\n              <>\n                {editContactId === contact.id ? (\n                  <EditableRow\n                    editFormData={editFormData}\n                    handleEditFormChange={handleEditFormChange}\n                    handleCancelClick={handleCancelClick}\n                  />\n                ) : (\n                  <ReadOnlyRow\n                    contact={contact}\n                    handleEditClick={handleEditClick}\n                    handleDeleteClick={handleDeleteClick}\n                  />\n                ) \n}\n              </>\n            )): searchResult.map(contact=>{\n            \n                return <Fragment>\n                  \n                {editContactId === contact.id ? (\n                  <EditableRow\n                    editFormData={editFormData}\n                    handleEditFormChange={handleEditFormChange}\n                    handleCancelClick={handleCancelClick}\n                  />\n                ) : (\n                  <ReadOnlyRow\n                    contact={contact}\n                    handleEditClick={handleEditClick}\n                    handleDeleteClick={handleDeleteClick}\n                  />\n                ) \n            }\n              </Fragment>\n            })\n            }\n\n          </tbody>\n        </table>\n      </form>\n\n      <h2>Add a Contact</h2>\n      <form onSubmit={handleAddFormSubmit}>\n        <input\n          type=\"text\"\n          name=\"fullName\"\n          required=\"required\"\n          placeholder=\"Enter a name...\"\n          onChange={handleAddFormChange}\n        />\n         \n        <input\n          type=\"text\"\n          name=\"address\"\n          required=\"required\"\n          placeholder=\"Enter an addres...\"\n          onChange={handleAddFormChange}\n        />\n        <input\n          type=\"text\"\n          name=\"phoneNumber\"\n          required=\"required\"\n          placeholder=\"Enter a phone number...\"\n          onChange={handleAddFormChange}\n        />\n        <input\n          type=\"email\"\n          name=\"email\"\n          required=\"required\"\n          placeholder=\"Enter an email...\"\n          onChange={handleAddFormChange}\n        />\n        <button type=\"submit\">Add</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}